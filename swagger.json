{
  "swagger": "2.0",
  "info": {
    "description": "Aplikasi sederhana ini merupakan challenge Platinum Binar Academy.",
    "version": "1.0.0",
    "title": "Platinum Challenge ( Bingle Shop )",
    "termsOfService": "http://bingleshop.com/terms/",
    "contact": {
      "email": "kelompok2@bingleshop.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "basePath": "/api",
  "tags": [
    {
      "name": "Auth",
      "description": "Operations about register user and login"
    },
    {
      "name": "User",
      "description": "Operations about User"
    },
    {
      "name": "Order",
      "description": "Operations about order"
    },
    {
      "name": "Product",
      "description": "Operations about product"
    },
    {
      "name": "Profile",
      "description": "Operations about profile user"
    }
  ],
  "schemes": [
    "http",
    "http"
  ],
  "paths": {
    "/user/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Add a new user to database",
        "description": "",
        "operationId": "register",
        "consumes": [
          "application/json",
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object that needs to be added to the database",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Registrasi User Berhasil"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Add a new user to database",
        "description": "",
        "operationId": "register",
        "consumes": [
          "application/json",
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object that needs to be added to the database",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Registrasi User Berhasil"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/user/show": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Show All Users",
        "description": "",
        "operationId": "show",
        "produces": [
          "application/json",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "description": "Failed operation"
          }
        }
      }
    },
    "/user/{userId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find user by ID",
        "description": "Returns a single user",
        "operationId": "getById",
        "produces": [
          "application/json",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Updates a user with form data",
        "description": "",
        "operationId": "updateById",
        "consumes": [
          "application/x-www-form-urlencoded",
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user that needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "Updated name of the user",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "in": "formData",
            "description": "Updated email of the user",
            "required": false,
            "type": "string"
          },
          {
            "name": "gender",
            "in": "formData",
            "description": "Updated gender of the user",
            "required": false,
            "type": "string"
          },
          {
            "name": "password",
            "in": "formData",
            "description": "Updated password of the user",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete a user",
        "description": "",
        "operationId": "deleteById",
        "produces": [
          "application/json",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/product/add": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Add new product",
        "description": "",
        "operationId": "create",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Product object that needs to be added to the database",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/product/show": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Show All Products",
        "description": "",
        "operationId": "show",
        "produces": [
          "application/json",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Product"
              }
            }
          },
          "400": {
            "description": "Failed operation"
          }
        }
      }
    },
    "/product/{productId}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Find product by ID",
        "description": "Returns a single product",
        "operationId": "getById",
        "produces": [
          "application/json",
          "application/json"
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of product to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Product not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Updates a product with form data",
        "description": "",
        "operationId": "updateById",
        "consumes": [
          "application/x-www-form-urlencoded",
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of product that needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "code",
            "in": "formData",
            "description": "Updated code of the product",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "Updated name of the product",
            "required": false,
            "type": "string"
          },
          {
            "name": "price",
            "in": "formData",
            "description": "Updated price of the product",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Delete a product",
        "description": "",
        "operationId": "deleteById",
        "produces": [
          "application/json",
          "application/json"
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Product id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/order/add": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Add new order",
        "description": "",
        "operationId": "create",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Order object that needs to be added to the database",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/order/show": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Show All Orders",
        "description": "",
        "operationId": "show",
        "produces": [
          "application/json",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          },
          "400": {
            "description": "Failed operation"
          }
        }
      }
    },
    "/order/{orderId}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Find order by ID",
        "description": "Returns a single order",
        "operationId": "getById",
        "produces": [
          "application/json",
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of order to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Updates a order with form data",
        "description": "",
        "operationId": "updateById",
        "consumes": [
          "application/x-www-form-urlencoded",
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user that needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "productId",
            "in": "formData",
            "description": "Updated product id of the order",
            "required": false,
            "type": "string"
          },
          {
            "name": "qty",
            "in": "formData",
            "description": "Updated qty of the order",
            "required": false,
            "type": "string"
          },
          {
            "name": "priceTotal",
            "in": "formData",
            "description": "Updated price total of the order",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "Order"
        ],
        "summary": "Delete a order",
        "description": "",
        "operationId": "deleteById",
        "produces": [
          "application/json",
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Order id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "Order": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "userId": {
          "type": "integer"
        },
        "productId": {
          "type": "integer"
        },
        "qty": {
          "type": "integer"
        },
        "priceTotal": {
          "type": "integer"
        },
        "status": {
          "type": "string",
          "description": "Order Status"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "gender": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "Profile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "userId": {
          "type": "integer"
        },
        "deskripsi": {
          "type": "text"
        },
        "avatar": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Category"
      }
    },
    "Product": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "price": {
          "type": "integer"
        },
        "image": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}